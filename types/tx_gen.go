package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *InternalTxCall) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Kind":
			z.Kind, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		case "Flags":
			z.Flags, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Flags")
				return
			}
		case "Depth":
			z.Depth, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Depth")
				return
			}
		case "Gas":
			z.Gas, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Gas")
				return
			}
		case "Destination":
			err = dc.ReadExactBytes((z.Destination)[:])
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "Sender":
			err = dc.ReadExactBytes((z.Sender)[:])
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "Input":
			z.Input, err = dc.ReadBytes(z.Input)
			if err != nil {
				err = msgp.WrapError(err, "Input")
				return
			}
		case "Value":
			err = dc.ReadExactBytes((z.Value)[:])
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InternalTxCall) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "Kind"
	err = en.Append(0x88, 0xa4, 0x4b, 0x69, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Kind)
	if err != nil {
		err = msgp.WrapError(err, "Kind")
		return
	}
	// write "Flags"
	err = en.Append(0xa5, 0x46, 0x6c, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Flags)
	if err != nil {
		err = msgp.WrapError(err, "Flags")
		return
	}
	// write "Depth"
	err = en.Append(0xa5, 0x44, 0x65, 0x70, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Depth)
	if err != nil {
		err = msgp.WrapError(err, "Depth")
		return
	}
	// write "Gas"
	err = en.Append(0xa3, 0x47, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Gas)
	if err != nil {
		err = msgp.WrapError(err, "Gas")
		return
	}
	// write "Destination"
	err = en.Append(0xab, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Destination)[:])
	if err != nil {
		err = msgp.WrapError(err, "Destination")
		return
	}
	// write "Sender"
	err = en.Append(0xa6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Sender)[:])
	if err != nil {
		err = msgp.WrapError(err, "Sender")
		return
	}
	// write "Input"
	err = en.Append(0xa5, 0x49, 0x6e, 0x70, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Input)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Value)[:])
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InternalTxCall) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "Kind"
	o = append(o, 0x88, 0xa4, 0x4b, 0x69, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Kind)
	// string "Flags"
	o = append(o, 0xa5, 0x46, 0x6c, 0x61, 0x67, 0x73)
	o = msgp.AppendUint32(o, z.Flags)
	// string "Depth"
	o = append(o, 0xa5, 0x44, 0x65, 0x70, 0x74, 0x68)
	o = msgp.AppendInt32(o, z.Depth)
	// string "Gas"
	o = append(o, 0xa3, 0x47, 0x61, 0x73)
	o = msgp.AppendInt64(o, z.Gas)
	// string "Destination"
	o = append(o, 0xab, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendBytes(o, (z.Destination)[:])
	// string "Sender"
	o = append(o, 0xa6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72)
	o = msgp.AppendBytes(o, (z.Sender)[:])
	// string "Input"
	o = append(o, 0xa5, 0x49, 0x6e, 0x70, 0x75, 0x74)
	o = msgp.AppendBytes(o, z.Input)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, (z.Value)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InternalTxCall) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Kind":
			z.Kind, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		case "Flags":
			z.Flags, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Flags")
				return
			}
		case "Depth":
			z.Depth, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Depth")
				return
			}
		case "Gas":
			z.Gas, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gas")
				return
			}
		case "Destination":
			bts, err = msgp.ReadExactBytes(bts, (z.Destination)[:])
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "Sender":
			bts, err = msgp.ReadExactBytes(bts, (z.Sender)[:])
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "Input":
			z.Input, bts, err = msgp.ReadBytesBytes(bts, z.Input)
			if err != nil {
				err = msgp.WrapError(err, "Input")
				return
			}
		case "Value":
			bts, err = msgp.ReadExactBytes(bts, (z.Value)[:])
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InternalTxCall) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 6 + msgp.Uint32Size + 6 + msgp.Int32Size + 4 + msgp.Int64Size + 12 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 7 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 6 + msgp.BytesPrefixSize + len(z.Input) + 6 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *InternalTxReturn) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StatusCode":
			z.StatusCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "GasLeft":
			z.GasLeft, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "GasLeft")
				return
			}
		case "Output":
			z.Output, err = dc.ReadBytes(z.Output)
			if err != nil {
				err = msgp.WrapError(err, "Output")
				return
			}
		case "CreateAddress":
			err = dc.ReadExactBytes((z.CreateAddress)[:])
			if err != nil {
				err = msgp.WrapError(err, "CreateAddress")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InternalTxReturn) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "StatusCode"
	err = en.Append(0x84, 0xaa, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatusCode)
	if err != nil {
		err = msgp.WrapError(err, "StatusCode")
		return
	}
	// write "GasLeft"
	err = en.Append(0xa7, 0x47, 0x61, 0x73, 0x4c, 0x65, 0x66, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.GasLeft)
	if err != nil {
		err = msgp.WrapError(err, "GasLeft")
		return
	}
	// write "Output"
	err = en.Append(0xa6, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Output)
	if err != nil {
		err = msgp.WrapError(err, "Output")
		return
	}
	// write "CreateAddress"
	err = en.Append(0xad, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.CreateAddress)[:])
	if err != nil {
		err = msgp.WrapError(err, "CreateAddress")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InternalTxReturn) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "StatusCode"
	o = append(o, 0x84, 0xaa, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.StatusCode)
	// string "GasLeft"
	o = append(o, 0xa7, 0x47, 0x61, 0x73, 0x4c, 0x65, 0x66, 0x74)
	o = msgp.AppendInt64(o, z.GasLeft)
	// string "Output"
	o = append(o, 0xa6, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74)
	o = msgp.AppendBytes(o, z.Output)
	// string "CreateAddress"
	o = append(o, 0xad, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendBytes(o, (z.CreateAddress)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InternalTxReturn) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StatusCode":
			z.StatusCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "GasLeft":
			z.GasLeft, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GasLeft")
				return
			}
		case "Output":
			z.Output, bts, err = msgp.ReadBytesBytes(bts, z.Output)
			if err != nil {
				err = msgp.WrapError(err, "Output")
				return
			}
		case "CreateAddress":
			bts, err = msgp.ReadExactBytes(bts, (z.CreateAddress)[:])
			if err != nil {
				err = msgp.WrapError(err, "CreateAddress")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InternalTxReturn) Msgsize() (s int) {
	s = 1 + 11 + msgp.IntSize + 8 + msgp.Int64Size + 7 + msgp.BytesPrefixSize + len(z.Output) + 14 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Log) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			err = dc.ReadExactBytes((z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Topics":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([][32]byte, zb0002)
			}
			for za0002 := range z.Topics {
				err = dc.ReadExactBytes((z.Topics[za0002])[:])
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0002)
					return
				}
			}
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "BlockNumber":
			z.BlockNumber, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockNumber")
				return
			}
		case "TxHash":
			err = dc.ReadExactBytes((z.TxHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "TxHash")
				return
			}
		case "TxIndex":
			z.TxIndex, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "TxIndex")
				return
			}
		case "BlockHash":
			err = dc.ReadExactBytes((z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "Index":
			z.Index, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Removed":
			z.Removed, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Removed")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Log) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Address"
	err = en.Append(0x89, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Address)[:])
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "Topics"
	err = en.Append(0xa6, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Topics)))
	if err != nil {
		err = msgp.WrapError(err, "Topics")
		return
	}
	for za0002 := range z.Topics {
		err = en.WriteBytes((z.Topics[za0002])[:])
		if err != nil {
			err = msgp.WrapError(err, "Topics", za0002)
			return
		}
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "BlockNumber"
	err = en.Append(0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockNumber)
	if err != nil {
		err = msgp.WrapError(err, "BlockNumber")
		return
	}
	// write "TxHash"
	err = en.Append(0xa6, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.TxHash)[:])
	if err != nil {
		err = msgp.WrapError(err, "TxHash")
		return
	}
	// write "TxIndex"
	err = en.Append(0xa7, 0x54, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint(z.TxIndex)
	if err != nil {
		err = msgp.WrapError(err, "TxIndex")
		return
	}
	// write "BlockHash"
	err = en.Append(0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.BlockHash)[:])
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// write "Index"
	err = en.Append(0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "Removed"
	err = en.Append(0xa7, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Removed)
	if err != nil {
		err = msgp.WrapError(err, "Removed")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Log) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Address"
	o = append(o, 0x89, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendBytes(o, (z.Address)[:])
	// string "Topics"
	o = append(o, 0xa6, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Topics)))
	for za0002 := range z.Topics {
		o = msgp.AppendBytes(o, (z.Topics[za0002])[:])
	}
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "BlockNumber"
	o = append(o, 0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.BlockNumber)
	// string "TxHash"
	o = append(o, 0xa6, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendBytes(o, (z.TxHash)[:])
	// string "TxIndex"
	o = append(o, 0xa7, 0x54, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint(o, z.TxIndex)
	// string "BlockHash"
	o = append(o, 0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendBytes(o, (z.BlockHash)[:])
	// string "Index"
	o = append(o, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint(o, z.Index)
	// string "Removed"
	o = append(o, 0xa7, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Removed)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Log) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			bts, err = msgp.ReadExactBytes(bts, (z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Topics":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([][32]byte, zb0002)
			}
			for za0002 := range z.Topics {
				bts, err = msgp.ReadExactBytes(bts, (z.Topics[za0002])[:])
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0002)
					return
				}
			}
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "BlockNumber":
			z.BlockNumber, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockNumber")
				return
			}
		case "TxHash":
			bts, err = msgp.ReadExactBytes(bts, (z.TxHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "TxHash")
				return
			}
		case "TxIndex":
			z.TxIndex, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxIndex")
				return
			}
		case "BlockHash":
			bts, err = msgp.ReadExactBytes(bts, (z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "Index":
			z.Index, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Removed":
			z.Removed, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Removed")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Log) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 7 + msgp.ArrayHeaderSize + (len(z.Topics) * (32 * (msgp.ByteSize))) + 5 + msgp.BytesPrefixSize + len(z.Data) + 12 + msgp.Uint64Size + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 8 + msgp.UintSize + 10 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 6 + msgp.UintSize + 8 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Transaction) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			err = dc.ReadExactBytes((z.Hash)[:])
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "index":
			z.TransactionIndex, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TransactionIndex")
				return
			}
		case "nonce":
			z.Nonce, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "block":
			err = dc.ReadExactBytes((z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "height":
			z.BlockNumber, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "BlockNumber")
				return
			}
		case "from":
			err = dc.ReadExactBytes((z.From)[:])
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "to":
			err = dc.ReadExactBytes((z.To)[:])
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
		case "value":
			err = dc.ReadExactBytes((z.Value)[:])
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "gasprice":
			err = dc.ReadExactBytes((z.GasPrice)[:])
			if err != nil {
				err = msgp.WrapError(err, "GasPrice")
				return
			}
		case "gas":
			z.Gas, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Gas")
				return
			}
		case "input":
			z.Input, err = dc.ReadBytes(z.Input)
			if err != nil {
				err = msgp.WrapError(err, "Input")
				return
			}
		case "cgasused":
			z.CumulativeGasUsed, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CumulativeGasUsed")
				return
			}
		case "gasused":
			z.GasUsed, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "GasUsed")
				return
			}
		case "contractaddr":
			err = dc.ReadExactBytes((z.ContractAddress)[:])
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "logs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]Log, zb0002)
			}
			for za0008 := range z.Logs {
				err = z.Logs[za0008].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Logs", za0008)
					return
				}
			}
		case "bloom":
			err = dc.ReadExactBytes((z.LogsBloom)[:])
			if err != nil {
				err = msgp.WrapError(err, "LogsBloom")
				return
			}
		case "status":
			z.Status, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "statusstr":
			z.StatusStr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "StatusStr")
				return
			}
		case "outdata":
			z.OutData, err = dc.ReadBytes(z.OutData)
			if err != nil {
				err = msgp.WrapError(err, "OutData")
				return
			}
		case "internalTxCalls":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "InternalTxCalls")
				return
			}
			if cap(z.InternalTxCalls) >= int(zb0003) {
				z.InternalTxCalls = (z.InternalTxCalls)[:zb0003]
			} else {
				z.InternalTxCalls = make([]InternalTxCall, zb0003)
			}
			for za0010 := range z.InternalTxCalls {
				err = z.InternalTxCalls[za0010].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "InternalTxCalls", za0010)
					return
				}
			}
		case "internalTxReturns":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "InternalTxReturns")
				return
			}
			if cap(z.InternalTxReturns) >= int(zb0004) {
				z.InternalTxReturns = (z.InternalTxReturns)[:zb0004]
			} else {
				z.InternalTxReturns = make([]InternalTxReturn, zb0004)
			}
			for za0011 := range z.InternalTxReturns {
				err = z.InternalTxReturns[za0011].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "InternalTxReturns", za0011)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Transaction) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 21
	// write "hash"
	err = en.Append(0xde, 0x0, 0x15, 0xa4, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Hash)[:])
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "index"
	err = en.Append(0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TransactionIndex)
	if err != nil {
		err = msgp.WrapError(err, "TransactionIndex")
		return
	}
	// write "nonce"
	err = en.Append(0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Nonce)
	if err != nil {
		err = msgp.WrapError(err, "Nonce")
		return
	}
	// write "block"
	err = en.Append(0xa5, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.BlockHash)[:])
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// write "height"
	err = en.Append(0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BlockNumber)
	if err != nil {
		err = msgp.WrapError(err, "BlockNumber")
		return
	}
	// write "from"
	err = en.Append(0xa4, 0x66, 0x72, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.From)[:])
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	// write "to"
	err = en.Append(0xa2, 0x74, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.To)[:])
	if err != nil {
		err = msgp.WrapError(err, "To")
		return
	}
	// write "value"
	err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Value)[:])
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// write "gasprice"
	err = en.Append(0xa8, 0x67, 0x61, 0x73, 0x70, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.GasPrice)[:])
	if err != nil {
		err = msgp.WrapError(err, "GasPrice")
		return
	}
	// write "gas"
	err = en.Append(0xa3, 0x67, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Gas)
	if err != nil {
		err = msgp.WrapError(err, "Gas")
		return
	}
	// write "input"
	err = en.Append(0xa5, 0x69, 0x6e, 0x70, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Input)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	// write "cgasused"
	err = en.Append(0xa8, 0x63, 0x67, 0x61, 0x73, 0x75, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CumulativeGasUsed)
	if err != nil {
		err = msgp.WrapError(err, "CumulativeGasUsed")
		return
	}
	// write "gasused"
	err = en.Append(0xa7, 0x67, 0x61, 0x73, 0x75, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.GasUsed)
	if err != nil {
		err = msgp.WrapError(err, "GasUsed")
		return
	}
	// write "contractaddr"
	err = en.Append(0xac, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.ContractAddress)[:])
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "logs"
	err = en.Append(0xa4, 0x6c, 0x6f, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Logs)))
	if err != nil {
		err = msgp.WrapError(err, "Logs")
		return
	}
	for za0008 := range z.Logs {
		err = z.Logs[za0008].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Logs", za0008)
			return
		}
	}
	// write "bloom"
	err = en.Append(0xa5, 0x62, 0x6c, 0x6f, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.LogsBloom)[:])
	if err != nil {
		err = msgp.WrapError(err, "LogsBloom")
		return
	}
	// write "status"
	err = en.Append(0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "statusstr"
	err = en.Append(0xa9, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x74, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.StatusStr)
	if err != nil {
		err = msgp.WrapError(err, "StatusStr")
		return
	}
	// write "outdata"
	err = en.Append(0xa7, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.OutData)
	if err != nil {
		err = msgp.WrapError(err, "OutData")
		return
	}
	// write "internalTxCalls"
	err = en.Append(0xaf, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.InternalTxCalls)))
	if err != nil {
		err = msgp.WrapError(err, "InternalTxCalls")
		return
	}
	for za0010 := range z.InternalTxCalls {
		err = z.InternalTxCalls[za0010].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "InternalTxCalls", za0010)
			return
		}
	}
	// write "internalTxReturns"
	err = en.Append(0xb1, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.InternalTxReturns)))
	if err != nil {
		err = msgp.WrapError(err, "InternalTxReturns")
		return
	}
	for za0011 := range z.InternalTxReturns {
		err = z.InternalTxReturns[za0011].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "InternalTxReturns", za0011)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Transaction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 21
	// string "hash"
	o = append(o, 0xde, 0x0, 0x15, 0xa4, 0x68, 0x61, 0x73, 0x68)
	o = msgp.AppendBytes(o, (z.Hash)[:])
	// string "index"
	o = append(o, 0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt64(o, z.TransactionIndex)
	// string "nonce"
	o = append(o, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Nonce)
	// string "block"
	o = append(o, 0xa5, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	o = msgp.AppendBytes(o, (z.BlockHash)[:])
	// string "height"
	o = append(o, 0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.BlockNumber)
	// string "from"
	o = append(o, 0xa4, 0x66, 0x72, 0x6f, 0x6d)
	o = msgp.AppendBytes(o, (z.From)[:])
	// string "to"
	o = append(o, 0xa2, 0x74, 0x6f)
	o = msgp.AppendBytes(o, (z.To)[:])
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, (z.Value)[:])
	// string "gasprice"
	o = append(o, 0xa8, 0x67, 0x61, 0x73, 0x70, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendBytes(o, (z.GasPrice)[:])
	// string "gas"
	o = append(o, 0xa3, 0x67, 0x61, 0x73)
	o = msgp.AppendUint64(o, z.Gas)
	// string "input"
	o = append(o, 0xa5, 0x69, 0x6e, 0x70, 0x75, 0x74)
	o = msgp.AppendBytes(o, z.Input)
	// string "cgasused"
	o = append(o, 0xa8, 0x63, 0x67, 0x61, 0x73, 0x75, 0x73, 0x65, 0x64)
	o = msgp.AppendUint64(o, z.CumulativeGasUsed)
	// string "gasused"
	o = append(o, 0xa7, 0x67, 0x61, 0x73, 0x75, 0x73, 0x65, 0x64)
	o = msgp.AppendUint64(o, z.GasUsed)
	// string "contractaddr"
	o = append(o, 0xac, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x64, 0x64, 0x72)
	o = msgp.AppendBytes(o, (z.ContractAddress)[:])
	// string "logs"
	o = append(o, 0xa4, 0x6c, 0x6f, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Logs)))
	for za0008 := range z.Logs {
		o, err = z.Logs[za0008].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Logs", za0008)
			return
		}
	}
	// string "bloom"
	o = append(o, 0xa5, 0x62, 0x6c, 0x6f, 0x6f, 0x6d)
	o = msgp.AppendBytes(o, (z.LogsBloom)[:])
	// string "status"
	o = append(o, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendUint64(o, z.Status)
	// string "statusstr"
	o = append(o, 0xa9, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x74, 0x72)
	o = msgp.AppendString(o, z.StatusStr)
	// string "outdata"
	o = append(o, 0xa7, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.OutData)
	// string "internalTxCalls"
	o = append(o, 0xaf, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.InternalTxCalls)))
	for za0010 := range z.InternalTxCalls {
		o, err = z.InternalTxCalls[za0010].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "InternalTxCalls", za0010)
			return
		}
	}
	// string "internalTxReturns"
	o = append(o, 0xb1, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.InternalTxReturns)))
	for za0011 := range z.InternalTxReturns {
		o, err = z.InternalTxReturns[za0011].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "InternalTxReturns", za0011)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Transaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			bts, err = msgp.ReadExactBytes(bts, (z.Hash)[:])
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "index":
			z.TransactionIndex, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionIndex")
				return
			}
		case "nonce":
			z.Nonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "block":
			bts, err = msgp.ReadExactBytes(bts, (z.BlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "height":
			z.BlockNumber, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockNumber")
				return
			}
		case "from":
			bts, err = msgp.ReadExactBytes(bts, (z.From)[:])
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "to":
			bts, err = msgp.ReadExactBytes(bts, (z.To)[:])
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
		case "value":
			bts, err = msgp.ReadExactBytes(bts, (z.Value)[:])
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "gasprice":
			bts, err = msgp.ReadExactBytes(bts, (z.GasPrice)[:])
			if err != nil {
				err = msgp.WrapError(err, "GasPrice")
				return
			}
		case "gas":
			z.Gas, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gas")
				return
			}
		case "input":
			z.Input, bts, err = msgp.ReadBytesBytes(bts, z.Input)
			if err != nil {
				err = msgp.WrapError(err, "Input")
				return
			}
		case "cgasused":
			z.CumulativeGasUsed, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CumulativeGasUsed")
				return
			}
		case "gasused":
			z.GasUsed, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GasUsed")
				return
			}
		case "contractaddr":
			bts, err = msgp.ReadExactBytes(bts, (z.ContractAddress)[:])
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "logs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]Log, zb0002)
			}
			for za0008 := range z.Logs {
				bts, err = z.Logs[za0008].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Logs", za0008)
					return
				}
			}
		case "bloom":
			bts, err = msgp.ReadExactBytes(bts, (z.LogsBloom)[:])
			if err != nil {
				err = msgp.WrapError(err, "LogsBloom")
				return
			}
		case "status":
			z.Status, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "statusstr":
			z.StatusStr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatusStr")
				return
			}
		case "outdata":
			z.OutData, bts, err = msgp.ReadBytesBytes(bts, z.OutData)
			if err != nil {
				err = msgp.WrapError(err, "OutData")
				return
			}
		case "internalTxCalls":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InternalTxCalls")
				return
			}
			if cap(z.InternalTxCalls) >= int(zb0003) {
				z.InternalTxCalls = (z.InternalTxCalls)[:zb0003]
			} else {
				z.InternalTxCalls = make([]InternalTxCall, zb0003)
			}
			for za0010 := range z.InternalTxCalls {
				bts, err = z.InternalTxCalls[za0010].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "InternalTxCalls", za0010)
					return
				}
			}
		case "internalTxReturns":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InternalTxReturns")
				return
			}
			if cap(z.InternalTxReturns) >= int(zb0004) {
				z.InternalTxReturns = (z.InternalTxReturns)[:zb0004]
			} else {
				z.InternalTxReturns = make([]InternalTxReturn, zb0004)
			}
			for za0011 := range z.InternalTxReturns {
				bts, err = z.InternalTxReturns[za0011].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "InternalTxReturns", za0011)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Transaction) Msgsize() (s int) {
	s = 3 + 5 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 6 + msgp.Int64Size + 6 + msgp.Uint64Size + 6 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 7 + msgp.Int64Size + 5 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 3 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 6 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 9 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 4 + msgp.Uint64Size + 6 + msgp.BytesPrefixSize + len(z.Input) + 9 + msgp.Uint64Size + 8 + msgp.Uint64Size + 13 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 5 + msgp.ArrayHeaderSize
	for za0008 := range z.Logs {
		s += z.Logs[za0008].Msgsize()
	}
	s += 6 + msgp.ArrayHeaderSize + (256 * (msgp.ByteSize)) + 7 + msgp.Uint64Size + 10 + msgp.StringPrefixSize + len(z.StatusStr) + 8 + msgp.BytesPrefixSize + len(z.OutData) + 16 + msgp.ArrayHeaderSize
	for za0010 := range z.InternalTxCalls {
		s += z.InternalTxCalls[za0010].Msgsize()
	}
	s += 18 + msgp.ArrayHeaderSize
	for za0011 := range z.InternalTxReturns {
		s += z.InternalTxReturns[za0011].Msgsize()
	}
	return
}
